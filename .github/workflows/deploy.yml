name: Deploy to EC2

on:
  push:
    branches:
      - main 
    paths:
      - 'backend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7

    - name: Generate random tag
      id: generate_tag
      run: |
        # Generate a random 6-digit hexadecimal tag
        TAG=$(openssl rand -hex 3)
        echo "TAG=$TAG" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.6.1
    
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: |
        docker build -t niznaor/doggo-app:${{ env.TAG }} ./backend
        
    - name: Push Docker image to Docker Hub
      run: |
        docker push niznaor/doggo-app:${{ env.TAG }}

    - name: SSH to EC2 and deploy
      run: |
        ssh -i /tmp/doggo-app-key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
        # Create or update the .env file on EC2
        echo "DB_HOST=${{ secrets.DB_HOST }}" > /home/ec2-user/app/.env
        echo "DB_PORT=${{ secrets.DB_PORT }}" >> /home/ec2-user/app/.env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> /home/ec2-user/app/.env
        echo "DB_USER=${{ secrets.DB_USER }}" >> /home/ec2-user/app/.env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/ec2-user/app/.env

        # Stop and remove the old container if it exists
        docker ps -q -f name=doggo-app && docker stop doggo-app && docker rm doggo-app || echo "No running container found with the name doggo-app"

        # Pull the new Docker image from Docker Hub
        docker pull niznaor/doggo-app:${{ env.TAG }}

        # Run the new container
        docker run -d --rm --name doggo-app -p 5000:5000 niznaor/doggo-app:${{ env.TAG }}
        EOF